// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CAPTUREINFORMATION_FOXGLOVE_H_
#define FLATBUFFERS_GENERATED_CAPTUREINFORMATION_FOXGLOVE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

#include "CarData_generated.h"
#include "RawImage_generated.h"
#include "VisionData_generated.h"

namespace foxglove {

struct CaptureInformation;
struct CaptureInformationBuilder;

struct CaptureInformation FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CaptureInformationBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CD = 4,
    VT_VD = 6,
    VT_RAW_IMAGE = 8
  };
  const foxglove::CarData *cd() const {
    return GetPointer<const foxglove::CarData *>(VT_CD);
  }
  foxglove::CarData *mutable_cd() {
    return GetPointer<foxglove::CarData *>(VT_CD);
  }
  const foxglove::VisionData *vd() const {
    return GetPointer<const foxglove::VisionData *>(VT_VD);
  }
  foxglove::VisionData *mutable_vd() {
    return GetPointer<foxglove::VisionData *>(VT_VD);
  }
  const foxglove::RawImage *raw_image() const {
    return GetPointer<const foxglove::RawImage *>(VT_RAW_IMAGE);
  }
  foxglove::RawImage *mutable_raw_image() {
    return GetPointer<foxglove::RawImage *>(VT_RAW_IMAGE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CD) &&
           verifier.VerifyTable(cd()) &&
           VerifyOffset(verifier, VT_VD) &&
           verifier.VerifyTable(vd()) &&
           VerifyOffset(verifier, VT_RAW_IMAGE) &&
           verifier.VerifyTable(raw_image()) &&
           verifier.EndTable();
  }
};

struct CaptureInformationBuilder {
  typedef CaptureInformation Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_cd(::flatbuffers::Offset<foxglove::CarData> cd) {
    fbb_.AddOffset(CaptureInformation::VT_CD, cd);
  }
  void add_vd(::flatbuffers::Offset<foxglove::VisionData> vd) {
    fbb_.AddOffset(CaptureInformation::VT_VD, vd);
  }
  void add_raw_image(::flatbuffers::Offset<foxglove::RawImage> raw_image) {
    fbb_.AddOffset(CaptureInformation::VT_RAW_IMAGE, raw_image);
  }
  explicit CaptureInformationBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CaptureInformation> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CaptureInformation>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CaptureInformation> CreateCaptureInformation(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<foxglove::CarData> cd = 0,
    ::flatbuffers::Offset<foxglove::VisionData> vd = 0,
    ::flatbuffers::Offset<foxglove::RawImage> raw_image = 0) {
  CaptureInformationBuilder builder_(_fbb);
  builder_.add_raw_image(raw_image);
  builder_.add_vd(vd);
  builder_.add_cd(cd);
  return builder_.Finish();
}

inline const foxglove::CaptureInformation *GetCaptureInformation(const void *buf) {
  return ::flatbuffers::GetRoot<foxglove::CaptureInformation>(buf);
}

inline const foxglove::CaptureInformation *GetSizePrefixedCaptureInformation(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<foxglove::CaptureInformation>(buf);
}

inline CaptureInformation *GetMutableCaptureInformation(void *buf) {
  return ::flatbuffers::GetMutableRoot<CaptureInformation>(buf);
}

inline foxglove::CaptureInformation *GetMutableSizePrefixedCaptureInformation(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<foxglove::CaptureInformation>(buf);
}

inline bool VerifyCaptureInformationBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<foxglove::CaptureInformation>(nullptr);
}

inline bool VerifySizePrefixedCaptureInformationBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<foxglove::CaptureInformation>(nullptr);
}

inline void FinishCaptureInformationBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<foxglove::CaptureInformation> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCaptureInformationBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<foxglove::CaptureInformation> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace foxglove

#endif  // FLATBUFFERS_GENERATED_CAPTUREINFORMATION_FOXGLOVE_H_
