// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CARDATA_FOXGLOVE_H_
#define FLATBUFFERS_GENERATED_CARDATA_FOXGLOVE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

#include "Time_generated.h"

namespace foxglove {

struct CarData;
struct CarDataBuilder;

struct CarData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CarDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MODE = 4,
    VT_STATUS = 6,
    VT_NUMBER = 8,
    VT_DUNE = 10
  };
  uint8_t mode() const {
    return GetField<uint8_t>(VT_MODE, 0);
  }
  bool mutate_mode(uint8_t _mode = 0) {
    return SetField<uint8_t>(VT_MODE, _mode, 0);
  }
  uint8_t status() const {
    return GetField<uint8_t>(VT_STATUS, 0);
  }
  bool mutate_status(uint8_t _status = 0) {
    return SetField<uint8_t>(VT_STATUS, _status, 0);
  }
  uint8_t number() const {
    return GetField<uint8_t>(VT_NUMBER, 0);
  }
  bool mutate_number(uint8_t _number = 0) {
    return SetField<uint8_t>(VT_NUMBER, _number, 0);
  }
  uint8_t dune() const {
    return GetField<uint8_t>(VT_DUNE, 0);
  }
  bool mutate_dune(uint8_t _dune = 0) {
    return SetField<uint8_t>(VT_DUNE, _dune, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MODE, 1) &&
           VerifyField<uint8_t>(verifier, VT_STATUS, 1) &&
           VerifyField<uint8_t>(verifier, VT_NUMBER, 1) &&
           VerifyField<uint8_t>(verifier, VT_DUNE, 1) &&
           verifier.EndTable();
  }
};

struct CarDataBuilder {
  typedef CarData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_mode(uint8_t mode) {
    fbb_.AddElement<uint8_t>(CarData::VT_MODE, mode, 0);
  }
  void add_status(uint8_t status) {
    fbb_.AddElement<uint8_t>(CarData::VT_STATUS, status, 0);
  }
  void add_number(uint8_t number) {
    fbb_.AddElement<uint8_t>(CarData::VT_NUMBER, number, 0);
  }
  void add_dune(uint8_t dune) {
    fbb_.AddElement<uint8_t>(CarData::VT_DUNE, dune, 0);
  }
  explicit CarDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CarData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CarData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CarData> CreateCarData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t mode = 0,
    uint8_t status = 0,
    uint8_t number = 0,
    uint8_t dune = 0) {
  CarDataBuilder builder_(_fbb);
  builder_.add_dune(dune);
  builder_.add_number(number);
  builder_.add_status(status);
  builder_.add_mode(mode);
  return builder_.Finish();
}

inline const foxglove::CarData *GetCarData(const void *buf) {
  return ::flatbuffers::GetRoot<foxglove::CarData>(buf);
}

inline const foxglove::CarData *GetSizePrefixedCarData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<foxglove::CarData>(buf);
}

inline CarData *GetMutableCarData(void *buf) {
  return ::flatbuffers::GetMutableRoot<CarData>(buf);
}

inline foxglove::CarData *GetMutableSizePrefixedCarData(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<foxglove::CarData>(buf);
}

inline bool VerifyCarDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<foxglove::CarData>(nullptr);
}

inline bool VerifySizePrefixedCarDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<foxglove::CarData>(nullptr);
}

inline void FinishCarDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<foxglove::CarData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCarDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<foxglove::CarData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace foxglove

#endif  // FLATBUFFERS_GENERATED_CARDATA_FOXGLOVE_H_
